name: build-test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    services: {}          # we bring our own in the steps

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Gateway & Proxy test deps
        run: |
          python -m pip install --upgrade pip

          # Gateway
          python -m pip install --no-cache-dir -r services/gateway/requirements.txt
          python -m pip install --no-cache-dir -e services/gateway

          # LLM Proxy (if you have a requirements file)
          if [ -f services/llm_proxy/requirements.txt ]; then
            python -m pip install --no-cache-dir -r services/llm_proxy/requirements.txt
          fi
          python -m pip install --no-cache-dir -e services/llm_proxy

          # Bring in the websockets runtime so httpx.AsyncClient.websocket_connect works
          python -m pip install --no-cache-dir websockets

      - name: Create .env for Compose
        run: |
          cat <<EOF > .env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}

          NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}

          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}

          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          EOF

      - name: Run tests
        run: pytest -q services/gateway/tests services/llm_proxy/tests

      - name: Compose up (core infra â€” no wait)
        run: docker compose -f compose/core.yml up -d

      - name: Compose down
        if: always()
        run: docker compose -f compose/core.yml down -v
