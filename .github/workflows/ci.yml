name: build-test-deploy

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Gateway deps
        run: |
          python -m pip install --no-cache-dir -r services/gateway/requirements.txt
          python -m pip install --no-cache-dir -e services/gateway

      - name: Install LLM-Proxy deps
        run: |
          python -m pip install --no-cache-dir -e services/llm_proxy

      - name: Install Dialogue-Worker
        run: python -m pip install --no-cache-dir -e services/dialogue_worker


      - name: Create .env next to core.yml
        shell: bash
        run: |
          cat > compose/.env <<EOF          # ← inside the compose/ folder
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          EOF



      - name: Run pytest (all services)
        run: pytest -q

      - name: Compose up stack (core + monitoring + ci profile)
        run: |
          docker compose \
            -f compose/core.yml \
            -f compose/monitoring.yml \
            --profile ci \
            up -d --build

      - name: Compose down after test
        if: always()
        run: docker compose -f compose/core.yml down -v

      - name: Show container status & failing logs
        if: always()                   # runs even if previous step failed
        run: |
          docker compose -f compose/core.yml ps -a
          echo "------- last 50 lines of unhealthy containers -------"
          for svc in $(docker compose -f compose/core.yml ps --services --filter "status=exited"); do
            echo "----- $svc -----"
            docker compose -f compose/core.yml logs --tail=50 $svc
          done


  deploy:
    name: Deploy to Infra VM
    runs-on: self-hosted
    needs: build-test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH & Deploy to Infra VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 10.185.1.76
          username: david
          key: ${{ secrets.INFRA_SSH_KEY }}
          script: |
            set -euo pipefail
            PROJECT=sara-core
            cd /opt/sara-ai

            # Clean up any conflicting containers
            docker ps -a --format '{{.Names}}' | grep '_traefik$\|_minio$\|_redis$\|_neo4j$\|_temporal$\|_nats$' | xargs -r docker rm -f || true

            # Regenerate .env file
            cat > .env <<EOF
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
            MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
            MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOF

            # Cleanly stop previous compose stack
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f compose/core.yml \
              down --volumes --remove-orphans || true

            # Pull any updated images
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f compose/core.yml \
              pull --quiet

            # Rebuild and recreate containers
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f compose/core.yml \
              up -d --force-recreate

            # Show running containers
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f compose/core.yml \
              ps


