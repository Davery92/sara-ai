name: build-test-deploy

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Gateway deps
        run: |
          python -m pip install --no-cache-dir -r services/gateway/requirements.txt
          python -m pip install --no-cache-dir -e services/gateway

      - name: Install LLM-Proxy deps
        run: |
          python -m pip install --no-cache-dir -e services/llm_proxy

      - name: Create .env for Compose
        run: |
          cat <<EOF > .env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          EOF

      - name: Run pytest (all services)
        run: pytest -q

      - name: Compose up core infra (just to validate docker works)
        run: docker compose -f compose/core.yml up -d

      - name: Compose down after test
        if: always()
        run: docker compose -f compose/core.yml down -v

  deploy:
    name: Deploy to Infra VM
    runs-on: self-hosted
    needs: build-test
    if: success()


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH & Deploy to Infra VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 10.185.1.76
          username: david
          key: ${{ secrets.INFRA_SSH_KEY }}
          script: |
            set -euo pipefail
            PROJECT=sara-core
            cd /opt/sara-ai

            # Regenerate .env
            cat > .env <<EOF
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
            MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
            MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOF

            # Cleanly stop previous run
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f core.yml \
              down --volumes --remove-orphans

            # Pull latest images
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f core.yml \
              pull --quiet

            # Start new containers
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f core.yml \
              up -d --force-recreate

            # Show final state
            docker compose \
              --env-file .env \
              -p "$PROJECT" \
              -f core.yml \
              ps


