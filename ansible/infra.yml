---
- name: Bootstrap & deploy Sara-AI stack
  hosts: infra
  become: yes

  vars:
    docker_repo: "https://download.docker.com/linux/ubuntu"
    docker_keyring: "/etc/apt/keyrings/docker.gpg"
    docker_apt_repo: >
      deb [arch=amd64 signed-by={{ docker_keyring }}]
      {{ docker_repo }} {{ ansible_distribution_release }} stable

    compose_project_path: /opt/sara-ai
    compose_compose_dir: "{{ compose_project_path }}/compose"
    compose_file: "{{ compose_compose_dir }}/core.yml"

    ufw_allowed_tcp: [22, 80, 443, 8000, 8001]
    python_libs: [redis, psycopg2-binary, nats-py]
    host_venv: "{{ compose_project_path }}/venv"

  tasks:
    - name: Remove unsigned Docker entries in sources.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        regexp: '^deb .*download.docker.com/linux/ubuntu'
        state: absent

    - name: Remove legacy docker.list
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent
        force: yes

    - name: Ensure keyring dir exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Install Docker GPG key (de-armored)
      ansible.builtin.shell: |
        curl -fsSL {{ docker_repo }}/gpg | \
          gpg --dearmor -o {{ docker_keyring }}
      args:
        creates: "{{ docker_keyring }}"

    - name: Add Docker APT repo
      ansible.builtin.apt_repository:
        repo: "{{ docker_apt_repo }}"
        filename: docker
        state: present

    - name: apt update
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Docker & pip
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - python3-pip
        state: present

    - name: Install python3-venv
      ansible.builtin.apt:
        name: python3-venv
        state: present

    - name: Create host venv for helper scripts
      ansible.builtin.command: python3 -m venv {{ host_venv }}
      args:
        creates: "{{ host_venv }}/bin/activate"
      become: no

    - name: Install Python libs for healthcheck into venv
      ansible.builtin.pip:
        virtualenv: "{{ host_venv }}"
        name: "{{ python_libs }}"
        state: latest
      become: no

    - name: Enable BuildKit
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        content: '{ "features": { "buildkit": true } }'
      notify: restart docker

    - name: Add {{ ansible_user }} to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Allow TCP ports via UFW
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ ufw_allowed_tcp }}"

    - name: Ensure UFW is enabled
      ansible.builtin.ufw:
        state: enabled

    - name: Ensure project dir exists
      ansible.builtin.file:
        path: "{{ compose_project_path }}"
        state: directory
        owner: "{{ ansible_user }}"
        mode: '0755'

    - name: Sync repo to VM
      ansible.builtin.synchronize:
        src: "{{ playbook_dir }}/../"
        dest: "{{ compose_project_path }}"
        delete: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=venv/"
        mode: push
        rsync_path: "rsync"
      become: no

    - name: Render .env from Vault secrets
      ansible.builtin.template:
        src: env.j2
        dest: "{{ compose_project_path }}/.env"
        owner: "{{ ansible_user }}"
        mode: '0600'

    - name: Copy .env for compose
      ansible.builtin.copy:
        src: "{{ compose_project_path }}/.env"
        dest: "{{ compose_compose_dir }}/.env"
        remote_src: yes
        owner: "{{ ansible_user }}"
        mode: '0600'

    # ─── Tear down any existing Sara stack ───────────────────────────────────
    - name: Tear down existing Sara stack
      community.docker.docker_compose_v2:
        project_src: "{{ compose_compose_dir }}"
        files:
          - core.yml
        project_name: sara
        state: absent
        remove_orphans: true

    # ─── Deploy fresh Sara stack ────────────────────────────────────────────
    - name: Deploy / update stack
      community.docker.docker_compose_v2:
        project_src: "{{ compose_compose_dir }}"
        files:
          - core.yml
        project_name: sara
        pull: always
        build: always
        recreate: always
        remove_orphans: true
        state: present
      register: compose_result

    - name: Show running services (when changed)
      ansible.builtin.shell: docker compose -f "{{ compose_file }}" ps
      when: compose_result.changed
      register: compose_ps

    - ansible.builtin.debug:
        var: compose_ps.stdout_lines
      when: compose_result.changed

  handlers:
    - name: restart docker
      ansible.builtin.systemd:
        name: docker
        state: restarted
