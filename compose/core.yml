x-env: &env
  TZ: America/New_York
  PUID: 1000
  PGID: 1000

services:
  # ─────────────────────────────── Redis ───────────────────────────────
  redis:
    image: redis:7.2-alpine
    container_name: sara_redis
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment: *env
    volumes:
      - redis-data:/data
    networks: [backend]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ─────────────────────────────── NATS ───────────────────────────────
  nats:
    image: nats:2.10-alpine
    command: ["-js", "-c", "/etc/nats/js.conf", "-m", "8222"]
    restart: unless-stopped
    volumes:
      - ./nats/stream.conf:/etc/nats/js.conf:ro
    ports:
      - "4222:4222"                    # client / JetStream traffic
    environment: 
      NATS_URL: nats://nats:4222
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ────────────────────────── PostgreSQL + pgvector ──────────────────────────
  postgres:
    image: ankane/pgvector       # includes the vector extension
    container_name: sara_postgres
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "5432:5432"
    environment:
      <<: *env
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ─────────────────────────────── Neo4j 5 ───────────────────────────────
  neo4j:
    image: neo4j:5
    container_name: sara_neo4j
    restart: unless-stopped
    environment:
      <<: *env
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}"
      NEO4J_dbms_default__listen__address: "0.0.0.0"
    volumes:
      - neo4j-data:/data
    ports:
      - "7474:7474"    # HTTP UI
      - "7687:7687"    # Bolt
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # ─────────────────────────────── MinIO ───────────────────────────────
  minio:
    image: minio/minio
    container_name: sara_minio
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      <<: *env
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    command: ["server", "/data"]
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
    networks: [backend]

  # ────────────────────────── Temporal (all-in-one) ──────────────────────────
  temporal:
    image: temporalio/auto-setup:1.22
    container_name: sara_temporal
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      <<: *env
      TEMPORAL_URL: "temporal:7233"
      DB: "postgres"
      DB_PORT: "5432"
      POSTGRES_SEEDS: "postgres"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
    volumes:
      - temporal-data:/data
    ports:
      - "7233:7233"
    networks: [backend]
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # ─────────────────────────── Traefik edge router ───────────────────────────
  traefik:
    image: traefik:latest
    container_name: sara_traefik
    restart: unless-stopped
    env_file:
      - ../.env
    command:
      - --providers.docker=true
      - --entrypoints.int.address=:8000   
      - --api.dashboard=true
      - --api.insecure=true          # serves dashboard on :8080
      - --metrics.prometheus=true
      - --metrics.prometheus.addrouterslabels=true
    ports:
      - "8080:8080"                  # dashboard / API
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [backend]

  # ─────────────────────────────── Dialogue Worker ───────────────────────────────
  dialogue_worker:
    container_name: sara_dialogue_worker
    build:
      context: ../services/dialogue_worker     # ← narrow context
      dockerfile: Dockerfile 
    depends_on:
      nats: { condition: service_healthy }
      llm_proxy: { condition: service_started }
    restart: unless-stopped
    environment:
      JWT_ALG: HS256
      JWT_SECRET: super-dev-secret-change-me
      NATS_URL:      nats://nats:4222
      LLM_WS_URL:    ws://llm_proxy:8000/v1/stream
      GATEWAY_URL:   http://gateway:8000
      METRICS_PORT:  8000
    networks: [backend]
    
  # ─────────────────────── Memory‑Rollup Worker (Temporal) ───────────────────────
  memory_worker:
    container_name: sara_memory_worker
    build:
      context: ..
      dockerfile: workflows/memory_worker/Dockerfile
    command: ["python", "-m", "worker"] 
    depends_on:
      redis:    { condition: service_healthy }
      postgres: { condition: service_healthy }
      temporal: { condition: service_started }
    restart: unless-stopped
    environment:
      <<: *env
      REDIS_CONV_TTL_MIN: "60"
      HOT_MSG_LIMIT:      "200"
      RAW_MEMORY_SUBJECT: "memory.raw"
    networks: [backend]

  # helper container for live coding / exec
  scripts:
    profiles: [dev]
    build:
      context: ..
      dockerfile: services/gateway/Dockerfile  # reuse gateway's Dockerfile
    volumes:
      - .:/app
    command: tail -f /dev/null  # keep container running for `exec`
    depends_on:
      - redis
      - postgres
    environment:
      - PYTHONPATH=/app  # ensure absolute imports work
    networks: [backend]


   

  # ─────────────────────────── Healthcheck orchestrator ───────────────────────────
  healthcheck:
    profiles: [ci]
    build:
      context: ..
      dockerfile: services/healthcheck/Dockerfile
    env_file:
      - ../.env
    environment:
      <<: *env
      # Redis
      REDIS_HOST:       "redis"
      REDIS_PORT:       "6379"
      # NATS
      NATS_HOST:        "nats"
      NATS_PORT:        "4222"
      # PostgreSQL
      POSTGRES_HOST:    "postgres"
      POSTGRES_PORT:    "5432"
      POSTGRES_DB:      "${POSTGRES_DB}"
      POSTGRES_USER:    "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGHOST:           "postgres"
      PGPORT:           "5432"
      PGDATABASE:       "${POSTGRES_DB}"
      PGUSER:           "${POSTGRES_USER}"
      PGPASSWORD:       "${POSTGRES_PASSWORD}"
      # Neo4j
      NEO4J_HOST:       "neo4j"
      NEO4J_PORT:       "7474"
      NEO4J_USER:       "neo4j"
      NEO4J_PASSWORD:   "${NEO4J_PASSWORD}"
      # MinIO
      MINIO_HOST:       "minio"
      MINIO_PORT:       "9000"
      MINIO_ROOT_USER:      "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD:  "${MINIO_ROOT_PASSWORD}"
      # Temporal
      TEMPORAL_HOST:    "temporal"
      TEMPORAL:
  # ─────────────────────────────── Gateway API ───────────────────────────────
  gateway:
    build:
      context: ..
      dockerfile: services/gateway/Dockerfile
    env_file:
      - ../.env
    environment:
      <<: *env
      ENV: prod
      LLM_BASE_URL: "http://100.104.68.115:11434"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      JWT_ALG:  HS256
      JWT_SECRET: super-dev-secret-change-me
    depends_on:
      postgres: { condition: service_healthy }
      redis:    { condition: service_healthy }
      nats:     { condition: service_healthy }
    networks: [backend]
    ports:
      - "8000:8000"

  # ─────────────────────────────── LLM Proxy ───────────────────────────────
  llm_proxy:
    build:
      context: ../services/llm_proxy
      dockerfile: Dockerfile
    env_file: [ ../.env ]
    environment:
      <<: *env
      OLLAMA_URL: "http://100.104.68.115:11434"
    networks: [backend]
    depends_on:
      nats:     { condition: service_healthy }
      temporal: { condition: service_started }
    ports:
      - "8001:8000"
    restart: unless-stopped

  # ─────────────────────────────── LLM Worker ───────────────────────────────
  llm_worker:
    build:
      context: ../services/llm_proxy
    command: ["python", "worker.py"]
    depends_on:
      temporal: { condition: service_healthy }
    networks: [backend]

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      # If your frontend build runs migrations and needs DB access during build:
      # args:
      #   POSTGRES_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    container_name: sara_frontend
    restart: unless-stopped
    ports: # Expose frontend directly to the host
      - "3000:3000"
    networks: [backend]
    env_file:
      - ../.env # For AUTH_SECRET if needed by Next.js server parts
    environment:
      NODE_ENV: production
      # Client-side will make requests to http://localhost:8000 (or whatever host port gateway is mapped to)
      NEXT_PUBLIC_BACKEND_API_URL: http://localhost:8000/v1
      NEXT_PUBLIC_BACKEND_WS_URL: ws://localhost:8000/v1/stream
      # Server-side calls from frontend container to gateway container
      INTERNAL_BACKEND_API_URL: http://gateway:8000 # This remains the same for container-to-container
      AUTH_SECRET: "${AUTH_SECRET}" # Ensure this is in your root .env if frontend NextAuth features are used
    depends_on:
      gateway: { condition: service_started }


# ─────────────────────────────── Networks & Volumes ───────────────────────────────

volumes:
  redis-data:
  pg-data:
  neo4j-data:
  minio-data:
  temporal-data:
  letsencrypt:

networks:
  backend:
    name: backend
    driver: bridge
