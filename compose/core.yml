
x-env: &common-env
  TZ: America/New_York
  PUID: 1000
  PGID: 1000

services:
  # ─────────────────────────────── Redis ───────────────────────────────
  redis:
    image: redis:7.2-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    environment: *common-env
    volumes:
      - redis-data:/data
    networks: [ backend ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ─────────────────────────────── NATS ───────────────────────────────
  nats:
    image: nats:2.10-alpine
    command: ["-js", "-m", "8222"]
    environment: *common-env
    networks: [ backend ]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ────────────────────────── PostgreSQL + pgvector ──────────────────────────
  postgres:
    image: ankane/pgvector       # includes the vector extension
    container_name: sara_postgres
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "5432:5432"
    environment:
      <<: *common-env
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks: [ backend ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ─────────────────────────────── Neo4j 5 ───────────────────────────────
   
  neo4j:
    image: neo4j:5
    container_name: sara_neo4j
    restart: unless-stopped
    environment:
      <<: *common-env
      # the only two vars Neo4j really needs:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}"
      NEO4J_dbms_default__listen__address: "0.0.0.0"
    volumes:
      - neo4j-data:/data
    ports:
      - "7474:7474"    # HTTP UI
      - "7687:7687"    # Bolt
    networks: [ backend ]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s


  # ─────────────────────────────── MinIO ───────────────────────────────
  minio:
    image: minio/minio
    container_name: sara_minio
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      <<: *common-env
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    command: server /data
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
    networks: [ backend ]
    healthcheck: {}
      

  # ────────────────────────── Temporal (all-in-one) ──────────────────────────
  temporal:
    image: temporalio/auto-setup:1.22
    container_name: sara_temporal
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      <<: *common-env
      TEMPORAL_URL: "temporal:7233"
      DB: "postgres"
      DB_PORT: "5432"
      POSTGRES_SEEDS: "postgres"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
    volumes:
      - temporal-data:/data
    ports:
      - "7233:7233"
    networks: [ backend ]
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
      

  # ─────────────────────────── Traefik edge router ───────────────────────────
  traefik:
    image: traefik:latest
    container_name: sara_traefik
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      <<: *common-env
    command:
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --api.dashboard=true
      - --metrics.prometheus=true
      - --metrics.prometheus.addrouterslabels=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks: [ backend ]
    # (optional) enable dashboard if you like:
    labels:
      - "traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # ─────────────────────────────── Dialogue Worker ───────────────────────────────

  dialogue_worker:
    build:
      context: ../services/dialogue_worker     # ← narrow context
      dockerfile: Dockerfile 
    depends_on: [ nats, llm_proxy ]
    environment:
      NATS_URL:      nats://nats:4222
      LLM_WS_URL:    ws://llm_proxy:8000/v1/stream
      METRICS_PORT:  8000
    networks: [ backend ]
    
    


  # ─────────────────────────── Healthcheck orchestrator ───────────────────────────
  healthcheck:
    profiles:
      - ci
    build:
      context: ..
      dockerfile: services/healthcheck/Dockerfile
    env_file:
      - ../.env
    environment:
      <<: *common-env

      # Redis
      REDIS_HOST:       "redis"
      REDIS_PORT:       "6379"

      # NATS
      NATS_HOST:        "nats"
      NATS_PORT:        "4222"

      # PostgreSQL
      POSTGRES_HOST:    "postgres"
      POSTGRES_PORT:    "5432"
      POSTGRES_DB:      "${POSTGRES_DB}"
      POSTGRES_USER:    "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      # also for psycopg2’s PG* env vars
      PGHOST:           "postgres"
      PGPORT:           "5432"
      PGDATABASE:       "${POSTGRES_DB}"
      PGUSER:           "${POSTGRES_USER}"
      PGPASSWORD:       "${POSTGRES_PASSWORD}"

      # Neo4j
      NEO4J_HOST:       "neo4j"
      NEO4J_PORT:       "7474"
      NEO4J_USER:       "neo4j"
      NEO4J_PASSWORD:   "${NEO4J_PASSWORD}"

      # MinIO
      MINIO_HOST:       "minio"
      MINIO_PORT:       "9000"
      MINIO_ROOT_USER:      "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD:  "${MINIO_ROOT_PASSWORD}"

      # Temporal
      TEMPORAL_HOST:    "temporal"
      TEMPORAL_PORT:    "7233"

    depends_on:
      redis:    { condition: service_healthy }
      nats:     { condition: service_healthy }
      postgres: { condition: service_healthy }
      neo4j:    { condition: service_healthy }
      #minio:    { condition: service_healthy }
      #temporal: { condition: service_healthy }

    networks: [ backend ]




  # ─────────────────────────────── Gateway API ───────────────────────────────
  gateway:
    build:
      context: ..
      dockerfile: services/gateway/Dockerfile
    env_file:
      - ../.env
    environment:
      <<: *common-env
      ENV: prod
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ backend ]
    ports:
      - "8000:8000"

  llm_proxy:
    build:
      context: ../services/llm_proxy
      dockerfile: Dockerfile
    env_file: [ ../.env ]
    environment:
      <<: *common-env
      OLLAMA_URL: "http://100.104.68.115:11434"
    networks: [ backend ]
    depends_on:
      nats: { condition: service_healthy }
      temporal:
        condition: service_started
    ports:
      - "8001:8000"
    restart: unless-stopped

  llm_worker:
    build:
      context: ../services/llm_proxy
    command: ["python", "worker.py"]
    depends_on:
      temporal:
        condition: service_healthy
    networks:
      - backend

volumes:
  redis-data:
  pg-data:
  neo4j-data:
  minio-data:
  temporal-data:
  letsencrypt:

networks:
  backend:
    driver: bridge
