"""create chat and message_v2 tables

Revision ID: d9a46f623b5d
Revises: cc31126ebc2c
Create Date: 2025-05-22 13:16:15.910666

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector # Already correctly added

# revision identifiers, used by Alembic.
revision: str = 'd9a46f623b5d'
down_revision: Union[str, None] = 'cc31126ebc2c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    #
    # MANUAL ADJUSTMENTS START HERE
    #

    # 1. Create embedding_messages table (your old 'Message' table, now renamed)
    #    Correct `embedding` to Vector(1024) and `created_at` to nullable=False (matching models.py)
    op.create_table('embedding_messages',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False), # Use postgresql.UUID
        sa.Column('room_id', postgresql.UUID(as_uuid=True), nullable=False), # Use postgresql.UUID
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('embedding', Vector(1024), nullable=True), # FIX: Use Vector
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False), # FIX: nullable=False
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_embedding_messages_room_id'), 'embedding_messages', ['room_id'], unique=False)
    # This index exists because of the old 'Message' table, Alembic is seeing it.
    # It might be in the database from a previous migration that failed.
    # The current upgrade wants to create it. We need to check if it already exists in the DB.
    # If it consistently says "already exists", we can remove this line OR add a 'if_not_exists=True' if supported.
    # For now, let's keep it, assuming we dropped old indices.
    op.create_index('ix_message_room_created', 'embedding_messages', ['room_id', 'created_at'], unique=False)


    # 2. Create chats table
    op.create_table('chats',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False), # Use postgresql.UUID
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('title', sa.Text(), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False), # Use postgresql.UUID
        sa.Column('visibility', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chats_user_id'), 'chats', ['user_id'], unique=False)


    # 3. Create messages_v2 table (your new chat history table)
    #    Correct `parts` and `attachments` to JSONB
    op.create_table('messages_v2',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False), # Use postgresql.UUID
        sa.Column('chat_id', postgresql.UUID(as_uuid=True), nullable=False), # Use postgresql.UUID
        sa.Column('role', sa.String(), nullable=False),
        sa.Column('parts', postgresql.JSONB(), nullable=False), # FIX: Use JSONB
        sa.Column('attachments', postgresql.JSONB(), nullable=False), # FIX: Use JSONB
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_messages_v2_chat_id'), 'messages_v2', ['chat_id'], unique=False)

    # 4. Handle old `message` table and its indices
    #    These drops are from the previous migration that removed the old `message` table,
    #    but it was renamed. If `message` table actually exists from an *older* migration,
    #    these drops are fine. If not, they might error. We'll leave them as is first.
    #    It's trying to drop indices and table named 'message'.
    op.drop_index(op.f('ix_message_room_created'), table_name='message') # This might refer to the old 'message' table
    op.drop_index(op.f('ix_message_room_id'), table_name='message') # This might refer to the old 'message' table
    op.drop_table('message') # This might refer to the old 'message' table


    # 5. REMOVE THE ALTER COLUMN FOR MEMORY.EMBEDDING
    #    Alembic incorrectly inferred this as a change. Your models.py defines it as Vector.
    #    If `memory` table already exists and `embedding` is `Vector(1024)`, then this `alter_column`
    #    should not be part of this migration.
    # op.alter_column('memory', 'embedding', # <--- COMMENT OUT THIS ENTIRE BLOCK
    #            existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=1024),
    #            type_=sa.Text(),
    #            existing_nullable=True)
    #
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Inverse of the upgrade operations.
    # We need to manually fix these based on our upgrade adjustments.

    # 1. Inverse of removing alter_column for memory.embedding:
    #    If it wasn't altered in upgrade, it shouldn't be altered in downgrade.
    # op.alter_column('memory', 'embedding', # <--- COMMENT OUT THIS ENTIRE BLOCK
    #            existing_type=sa.Text(),
    #            type_=pgvector.sqlalchemy.vector.VECTOR(dim=1024),
    #            existing_nullable=True)

    # 2. Recreate the old 'message' table and its indices (inverse of drops)
    #    Ensure these are correct if you had a previous 'message' table.
    op.create_table('message',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False), # Use postgresql.UUID
    sa.Column('room_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False), # Use postgresql.UUID
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', Vector(1024), autoincrement=False, nullable=True), # Use Vector
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True), # Use sa.DateTime
    sa.PrimaryKeyConstraint('id', name=op.f('message_pkey'))
    )
    op.create_index(op.f('ix_message_room_id'), 'message', ['room_id'], unique=False)
    op.create_index(op.f('ix_message_room_created'), 'message', ['room_id', 'created_at'], unique=False)

    # 3. Drop new tables (inverse of creates)
    op.drop_index(op.f('ix_messages_v2_chat_id'), table_name='messages_v2')
    op.drop_table('messages_v2')
    op.drop_index(op.f('ix_chats_user_id'), table_name='chats')
    op.drop_table('chats')
    op.drop_index('ix_message_room_created', table_name='embedding_messages') # This index might be incorrect if it was already dropped/renamed
    op.drop_index(op.f('ix_embedding_messages_room_id'), table_name='embedding_messages')
    op.drop_table('embedding_messages')
    # ### end Alembic commands ###